using SqlServerMCP;
using Xunit;
using Moq;
using FluentAssertions;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Data.Common;
using Microsoft.Data.SqlClient;
using System.Data; // <-- necesario para enums y tipos ADO.NET
using System.Collections; // <-- necesario para IEnumerator

namespace SqlServerMCP.Tests
{
    public class SqlServerMetadataProviderTests
    {
        // Aquí se deben implementar los tests unitarios usando mocks para SqlConnection y SqlCommand.
        // Ejemplo de test de GetColumnsAsync con Moq (requiere refactor para inyectar dependencias):
        // [Fact]
        // public async Task GetColumnsAsync_ReturnsColumns()
        // {
        //     // Arrange: mockear SqlConnection y SqlCommand
        //     // Act: llamar a GetColumnsAsync
        //     // Assert: verificar resultado
        // }

        [Fact]
        public async Task GetColumnsAsync_ReturnsColumns_WithMock()
        {
            // Arrange
            var mockProvider = new Mock<IMetadataProvider>();
            var expectedColumns = new List<ColumnInfo>
            {
                new ColumnInfo { Name = "Id", DataType = "int", IsNullable = false, MaxLength = null },
                new ColumnInfo { Name = "Name", DataType = "nvarchar", IsNullable = true, MaxLength = 50 }
            };
            mockProvider.Setup(x => x.GetColumnsAsync("dbo.TestTable")).ReturnsAsync(expectedColumns);

            // Act
            var result = await mockProvider.Object.GetColumnsAsync("dbo.TestTable");

            // Assert
            result.Should().NotBeNull();
            result.Should().HaveCount(2);
            result.Should().ContainSingle(c => c.Name == "Id" && c.DataType == "int" && c.IsNullable == false);
            result.Should().ContainSingle(c => c.Name == "Name" && c.DataType == "nvarchar" && c.IsNullable == true && c.MaxLength == 50);
        }

        [Fact]
        public async Task GetColumnsAsync_ThrowsException_ReturnsError()
        {
            // Arrange
            var mockProvider = new Mock<IMetadataProvider>();
            mockProvider.Setup(x => x.GetColumnsAsync(It.IsAny<string>())).ThrowsAsync(new System.Exception("DB error"));

            // Act & Assert
            await Assert.ThrowsAsync<System.Exception>(async () => await mockProvider.Object.GetColumnsAsync("dbo.FakeTable"));
        }

        [Fact]
        public async Task GetTablesAsync_ReturnsTables_WithMock()
        {
            // Arrange
            var mockProvider = new Mock<IMetadataProvider>();
            var expectedTables = new List<string> { "dbo.Table1", "dbo.Table2" };
            mockProvider.Setup(x => x.GetTablesAsync()).ReturnsAsync(expectedTables);

            // Act
            var result = await mockProvider.Object.GetTablesAsync();

            // Assert
            result.Should().NotBeNull();
            result.Should().HaveCount(2);
            result.Should().Contain("dbo.Table1");
            result.Should().Contain("dbo.Table2");
        }

        [Fact]
        public async Task GetTablesAsync_ThrowsException_ReturnsError()
        {
            // Arrange
            var mockProvider = new Mock<IMetadataProvider>();
            mockProvider.Setup(x => x.GetTablesAsync()).ThrowsAsync(new System.Exception("DB error"));

            // Act & Assert
            await Assert.ThrowsAsync<System.Exception>(async () => await mockProvider.Object.GetTablesAsync());
        }

        [Fact]
        public async Task GetViewsAsync_ReturnsViews_WithMock()
        {
            // Arrange
            var mockProvider = new Mock<IMetadataProvider>();
            var expectedViews = new List<string> { "dbo.View1" };
            mockProvider.Setup(x => x.GetViewsAsync()).ReturnsAsync(expectedViews);

            // Act
            var result = await mockProvider.Object.GetViewsAsync();

            // Assert
            result.Should().NotBeNull();
            result.Should().HaveCount(1);
            result.Should().Contain("dbo.View1");
        }

        [Fact]
        public async Task GetViewsAsync_ThrowsException_ReturnsError()
        {
            // Arrange
            var mockProvider = new Mock<IMetadataProvider>();
            mockProvider.Setup(x => x.GetViewsAsync()).ThrowsAsync(new System.Exception("DB error"));

            // Act & Assert
            await Assert.ThrowsAsync<System.Exception>(async () => await mockProvider.Object.GetViewsAsync());
        }

        [Fact]
        public async Task GetStoredProceduresAsync_ReturnsProcedures_WithMock()
        {
            // Arrange
            var mockProvider = new Mock<IMetadataProvider>();
            var expectedProcs = new List<string> { "dbo.Proc1" };
            mockProvider.Setup(x => x.GetStoredProceduresAsync()).ReturnsAsync(expectedProcs);

            // Act
            var result = await mockProvider.Object.GetStoredProceduresAsync();

            // Assert
            result.Should().NotBeNull();
            result.Should().HaveCount(1);
            result.Should().Contain("dbo.Proc1");
        }

        [Fact]
        public async Task GetStoredProceduresAsync_ThrowsException_ReturnsError()
        {
            // Arrange
            var mockProvider = new Mock<IMetadataProvider>();
            mockProvider.Setup(x => x.GetStoredProceduresAsync()).ThrowsAsync(new System.Exception("DB error"));

            // Act & Assert
            await Assert.ThrowsAsync<System.Exception>(async () => await mockProvider.Object.GetStoredProceduresAsync());
        }

        [Fact]
        public async Task GetForeignKeysAsync_ReturnsForeignKeys_WithMock()
        {
            // Arrange
            var mockProvider = new Mock<IMetadataProvider>();
            var expectedFks = new List<ForeignKeyInfo>
            {
                new ForeignKeyInfo { Table = "Orders", ForeignKey = "FK_Orders_Customers", ReferencedTable = "Customers", Column = "CustomerID", ReferencedColumn = "CustomerID" }
            };
            mockProvider.Setup(x => x.GetForeignKeysAsync()).ReturnsAsync(expectedFks);

            // Act
            var result = await mockProvider.Object.GetForeignKeysAsync();

            // Assert
            result.Should().NotBeNull();
            result.Should().HaveCount(1);
            result.Should().ContainSingle(fk => fk.ForeignKey == "FK_Orders_Customers" && fk.Table == "Orders");
        }

        [Fact]
        public async Task GetForeignKeysAsync_ThrowsException_ReturnsError()
        {
            // Arrange
            var mockProvider = new Mock<IMetadataProvider>();
            mockProvider.Setup(x => x.GetForeignKeysAsync()).ThrowsAsync(new System.Exception("DB error"));

            // Act & Assert
            await Assert.ThrowsAsync<System.Exception>(async () => await mockProvider.Object.GetForeignKeysAsync());
        }

        [Fact]
        public async Task ExecuteQueryAsync_ReturnsRows_WithMock()
        {
            // Arrange
            var mockProvider = new Mock<IMetadataProvider>();
            var expectedRows = new List<Dictionary<string, object?>>
            {
                new() { { "Col1", 1 }, { "Col2", "abc" } }
            };
            mockProvider.Setup(x => x.ExecuteQueryAsync("SELECT * FROM Test")).ReturnsAsync(expectedRows);

            // Act
            var result = await mockProvider.Object.ExecuteQueryAsync("SELECT * FROM Test");

            // Assert
            result.Should().NotBeNull();
            result.Should().HaveCount(1);
            result[0].Should().ContainKey("Col1");
            result[0]["Col1"].Should().Be(1);
            result[0]["Col2"].Should().Be("abc");
        }

        [Fact]
        public async Task ExecuteQueryAsync_ThrowsException_ReturnsError()
        {
            // Arrange
            var mockProvider = new Mock<IMetadataProvider>();
            mockProvider.Setup(x => x.ExecuteQueryAsync(It.IsAny<string>())).ThrowsAsync(new System.Exception("DB error"));

            // Act & Assert
            await Assert.ThrowsAsync<System.Exception>(async () => await mockProvider.Object.ExecuteQueryAsync("SELECT * FROM Test"));
        }

        [Fact]
        public async Task ExecuteStoredProcedureAsync_ReturnsRows_WithMock()
        {
            // Arrange
            var mockProvider = new Mock<IMetadataProvider>();
            var expectedRows = new List<Dictionary<string, object?>>
            {
                new() { { "Result", 42 } }
            };
            mockProvider.Setup(x => x.ExecuteStoredProcedureAsync("sp_test", It.IsAny<Dictionary<string, object>>())).ReturnsAsync(expectedRows);

            // Act
            var result = await mockProvider.Object.ExecuteStoredProcedureAsync("sp_test", new Dictionary<string, object> { { "param1", 1 } });

            // Assert
            result.Should().NotBeNull();
            result.Should().HaveCount(1);
            result[0].Should().ContainKey("Result");
            result[0]["Result"].Should().Be(42);
        }

        [Fact]
        public async Task ExecuteStoredProcedureAsync_ThrowsException_ReturnsError()
        {
            // Arrange
            var mockProvider = new Mock<IMetadataProvider>();
            mockProvider.Setup(x => x.ExecuteStoredProcedureAsync(It.IsAny<string>(), It.IsAny<Dictionary<string, object>>())).ThrowsAsync(new System.Exception("DB error"));

            // Act & Assert
            await Assert.ThrowsAsync<System.Exception>(async () => await mockProvider.Object.ExecuteStoredProcedureAsync("sp_test", new Dictionary<string, object> { { "param1", 1 } }));
        }

        [Fact]
        public async Task GetColumnsAsync_WithMockDbConnection_ReturnsColumns()
        {
            // Arrange: crear fakes para DbConnection y DbCommand
            var fakeReader = new FakeDbDataReader();
            var fakeCmd = new FakeDbCommand(fakeReader);
            var fakeConn = new FakeDbConnection(fakeCmd);

            var provider = new SqlServerMetadataProvider(() => fakeConn);

            // Act
            var columns = await provider.GetColumnsAsync("dbo.TestTable");

            // Assert
            columns.Should().NotBeNull();
            columns.Should().ContainSingle(c => c.Name == "Id" && c.DataType == "int" && c.IsNullable == false);
            columns.Should().ContainSingle(c => c.Name == "Name" && c.DataType == "nvarchar" && c.IsNullable == true && c.MaxLength == 50);
        }

        // Fakes para DbConnection, DbCommand y DbDataReader (solo una definición de cada una)
        private class FakeDbConnection : DbConnection
        {
            private readonly DbCommand _command;
            public FakeDbConnection(DbCommand command) { _command = command; }
            public override string ConnectionString { get; set; } = string.Empty;
            public override string Database => "FakeDb";
            public override string DataSource => "FakeSource";
            public override string ServerVersion => "1.0";
            public override ConnectionState State => ConnectionState.Open;
            public override void ChangeDatabase(string databaseName) { }
            public override void Close() { }
            public override void Open() { }
            public override Task OpenAsync(System.Threading.CancellationToken cancellationToken) => Task.CompletedTask;
            protected override DbTransaction BeginDbTransaction(IsolationLevel isolationLevel) => null!;
            protected override DbCommand CreateDbCommand() => _command;
        }

        private class FakeDbCommand : DbCommand
        {
            private readonly DbDataReader _reader;
            public FakeDbCommand(DbDataReader reader)
            {
                _reader = reader;
                CommandText = string.Empty;
                DbConnection = null!;
                DbTransaction = null!;
            }
            public override string CommandText { get; set; } = string.Empty;
            public override int CommandTimeout { get; set; }
            public override CommandType CommandType { get; set; }
            public override bool DesignTimeVisible { get; set; }
            public override UpdateRowSource UpdatedRowSource { get; set; }
            public override void Cancel() { }
            public override int ExecuteNonQuery() => 0;
            public override object ExecuteScalar() => 0;
            public override void Prepare() { }
            protected override DbParameter CreateDbParameter() => new SqlParameter();
            protected override DbConnection DbConnection { get; set; }
            protected override DbTransaction DbTransaction { get; set; }
            protected override DbParameterCollection DbParameterCollection { get; } = new SqlParameterCollectionMock();
            protected override DbDataReader ExecuteDbDataReader(CommandBehavior behavior) => _reader;
        }

        private class FakeDbDataReader : DbDataReader
        {
            private int _row = -1;
            private readonly object?[][] _data = new object?[][]
            {
                new object?[] { "Id", "int", "NO", null },
                new object?[] { "Name", "nvarchar", "YES", 50 }
            };
            public override bool Read() => ++_row < _data.Length;
            public override Task<bool> ReadAsync(System.Threading.CancellationToken cancellationToken) => Task.FromResult(Read());
            public override int FieldCount => 4;
            public override string GetString(int ordinal) => _data[_row][ordinal]?.ToString() ?? string.Empty;
            public override int GetInt32(int ordinal) => _data[_row][ordinal] is int i ? i : 0;
            public override object GetValue(int ordinal) => _data[_row][ordinal] ?? DBNull.Value;
            public override bool IsDBNull(int ordinal) => _data[_row][ordinal] == null;
            public override Task<bool> IsDBNullAsync(int ordinal, System.Threading.CancellationToken cancellationToken) => Task.FromResult(IsDBNull(ordinal));
            public override string GetName(int ordinal) => ordinal switch { 0 => "COLUMN_NAME", 1 => "DATA_TYPE", 2 => "IS_NULLABLE", 3 => "CHARACTER_MAXIMUM_LENGTH", _ => $"col{ordinal}" };
            public override bool HasRows => true;
            public override int Depth => 0;
            public override bool IsClosed => false;
            public override int RecordsAffected => 0;
            public override object this[int ordinal] => _data[_row][ordinal] ?? DBNull.Value;
            public override object this[string name] => throw new NotImplementedException();
            public override bool NextResult() => false;
            public override Task<bool> NextResultAsync(System.Threading.CancellationToken cancellationToken) => Task.FromResult(false);
            public override IEnumerator GetEnumerator() => throw new NotImplementedException();
            public override DataTable GetSchemaTable() => throw new NotImplementedException();
            // Métodos abstractos no usados
            public override bool GetBoolean(int ordinal) => throw new NotImplementedException();
            public override byte GetByte(int ordinal) => throw new NotImplementedException();
            public override long GetBytes(int ordinal, long dataOffset, byte[]? buffer, int bufferOffset, int length) => throw new NotImplementedException();
            public override char GetChar(int ordinal) => throw new NotImplementedException();
            public override long GetChars(int ordinal, long dataOffset, char[]? buffer, int bufferOffset, int length) => throw new NotImplementedException();
            public override string GetDataTypeName(int ordinal) => throw new NotImplementedException();
            public override DateTime GetDateTime(int ordinal) => throw new NotImplementedException();
            public override decimal GetDecimal(int ordinal) => throw new NotImplementedException();
            public override double GetDouble(int ordinal) => throw new NotImplementedException();
            public override Type GetFieldType(int ordinal) => throw new NotImplementedException();
            public override float GetFloat(int ordinal) => throw new NotImplementedException();
            public override Guid GetGuid(int ordinal) => throw new NotImplementedException();
            public override short GetInt16(int ordinal) => throw new NotImplementedException();
            public override long GetInt64(int ordinal) => throw new NotImplementedException();
            public override int GetOrdinal(string name) => throw new NotImplementedException();
            public override int GetValues(object[] values) => throw new NotImplementedException();
        }
    }
    // Fin de la clase SqlServerMetadataProviderTests

    public class SqlServerMetadataProviderRealTests
    {
        private const string ConnectionString = "Server=(localdb)\\MSSQLLocalDB;Integrated Security=true;Initial Catalog=master;";

        [Fact]
        public async Task GetColumnsAsync_ReturnsColumns_RealDb()
        {
            // Arrange: crear tabla temporal
            using var conn = new SqlConnection(ConnectionString);
            await conn.OpenAsync();
            using (var cmd = new SqlCommand("CREATE TABLE #TestTable (Id INT NOT NULL, Name NVARCHAR(50) NULL)", conn))
                await cmd.ExecuteNonQueryAsync();
            try
            {
                var provider = new SqlServerMetadataProvider(() => new SqlConnection(ConnectionString));
                // Act
                var columns = await provider.GetColumnsAsync("dbo.#TestTable");
                // Assert
                columns.Should().NotBeNull();
                columns.Should().ContainSingle(c => c.Name == "Id" && c.DataType == "int" && c.IsNullable == false);
                columns.Should().ContainSingle(c => c.Name == "Name" && c.DataType == "nvarchar" && c.IsNullable == true && c.MaxLength == 50);
            }
            finally
            {
                using (var cmd = new SqlCommand("DROP TABLE IF EXISTS #TestTable", conn))
                    await cmd.ExecuteNonQueryAsync();
            }
        }
    }

    // Mock para DbParameterCollection requerido por DbCommand
    public class SqlParameterCollectionMock : DbParameterCollection
    {
        private readonly List<DbParameter> _list = new();
        public override int Add(object value) { _list.Add((DbParameter)value); return _list.Count - 1; }
        public override void AddRange(Array values) { foreach (var v in values) Add(v); }
        public override void Clear() => _list.Clear();
        public override bool Contains(object value) => _list.Contains((DbParameter)value);
        public override bool Contains(string value) => _list.Any(p => p.ParameterName == value);
        public override void CopyTo(Array array, int index) => _list.ToArray().CopyTo(array, index);
        public override int Count => _list.Count;
        public override System.Collections.IEnumerator GetEnumerator() => _list.GetEnumerator();
        public override int IndexOf(object value) => _list.IndexOf((DbParameter)value);
        public override int IndexOf(string parameterName) => _list.FindIndex(p => p.ParameterName == parameterName);
        public override void Insert(int index, object value) => _list.Insert(index, (DbParameter)value);
        public override bool IsFixedSize => false;
        public override bool IsReadOnly => false;
        public override bool IsSynchronized => false;
        public override void Remove(object value) => _list.Remove((DbParameter)value);
        public override void RemoveAt(int index) => _list.RemoveAt(index);
        public override void RemoveAt(string parameterName) => _list.RemoveAt(IndexOf(parameterName));
        public override object SyncRoot => this;
        protected override DbParameter GetParameter(int index) => _list[index];
        protected override DbParameter GetParameter(string parameterName) => _list.First(p => p.ParameterName == parameterName);
        protected override void SetParameter(int index, DbParameter value) => _list[index] = value;
        protected override void SetParameter(string parameterName, DbParameter value) => _list[IndexOf(parameterName)] = value;
    }
}
